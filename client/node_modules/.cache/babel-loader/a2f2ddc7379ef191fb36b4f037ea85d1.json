{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { addClass, Event, attributes, compile, Component, EventHandler, getUniqueID, select, Browser, append } from '@syncfusion/ej2-base';\nimport { isNullOrUndefined, KeyboardEvents, NotifyPropertyChanges, Property, remove, removeClass, initializeCSPTemplate } from '@syncfusion/ej2-base';\nimport { Tooltip } from '@syncfusion/ej2-popups';\nvar ICONCSS = 'e-rating-icon e-icons e-star-filled';\nvar ITEMLIST = 'e-rating-item-list';\nvar ITEMCONTAINER = 'e-rating-item-container';\nvar SELECTED = 'e-rating-selected';\nvar INTERMEDIATE = 'e-rating-intermediate';\nvar LABEL = 'e-rating-label';\nvar RESET = 'e-icons e-reset';\nvar HIDDEN = 'e-rating-hidden';\nvar DISABLED = 'e-disabled';\nvar READONLY = 'e-rating-readonly';\nvar RTL = 'e-rtl';\nvar ANIMATION = 'e-rating-animation';\nvar FULLTEMPLATE = 'e-rating-full';\nvar EMPTYTEMPLATE = 'e-rating-empty';\nvar SELECTEDVALUE = 'e-selected-value';\nvar RATINGVALUE = '--rating-value';\n/**\n * Defines where to position the label in rating\n */\n\nexport var LabelPosition;\n\n(function (LabelPosition) {\n  /**\n   * The label is positioned at the top center of the rating component.\n   */\n  LabelPosition[\"Top\"] = \"Top\";\n  /**\n   * The label is positioned at the bottom center of the rating component.\n   */\n\n  LabelPosition[\"Bottom\"] = \"Bottom\";\n  /**\n   * The label is positioned at the left side of the rating component.\n   */\n\n  LabelPosition[\"Left\"] = \"Left\";\n  /**\n   * The label is positioned at the right side of the rating component.\n   */\n\n  LabelPosition[\"Right\"] = \"Right\";\n})(LabelPosition || (LabelPosition = {}));\n/**\n * Defines the precision type of the rating.\n * It is used to component the granularity of the rating, allowing users to provide ratings with varying levels of precision.\n */\n\n\nexport var PrecisionType;\n\n(function (PrecisionType) {\n  /**\n   * The rating is increased in whole number increments.\n   */\n  PrecisionType[\"Full\"] = \"Full\";\n  /**\n   * The rating is increased in increments of 0.5 (half).\n   */\n\n  PrecisionType[\"Half\"] = \"Half\";\n  /**\n   * The rating is increased in increments of 0.25 (quarter).\n   */\n\n  PrecisionType[\"Quarter\"] = \"Quarter\";\n  /**\n   * The rating is increased in increments of 0.1.\n   */\n\n  PrecisionType[\"Exact\"] = \"Exact\";\n})(PrecisionType || (PrecisionType = {}));\n/**\n * The Rating component allows the user to rate something by clicking on a set of symbols on a numeric scale.\n * This allows users to provide feedback or ratings for products, services, or content.\n *\n * ```html\n * <input id=\"rating\">\n * ```\n * ```typescript\n * <script>\n *   let ratingObj: Rating = new Rating();\n *   ratingObj.appendTo('#rating');\n * </script>\n * ```\n */\n\n\nvar Rating =\n/** @class */\nfunction (_super) {\n  __extends(Rating, _super);\n  /**\n   * Constructor for creating the widget\n   *\n   * @param  {RatingModel} options - Specifies the rating model\n   * @param  {string|HTMLButtonElement} element - Specifies the target element\n   */\n\n\n  function Rating(options, element) {\n    var _this = _super.call(this, options, element) || this;\n\n    _this.itemElements = [];\n    return _this;\n  }\n\n  Rating.prototype.preRender = function () {\n    if (!this.element.id) {\n      this.element.id = getUniqueID('e-' + this.getModuleName());\n    }\n\n    this.keyConfigs = {\n      downarrow: 'downarrow',\n      leftarrow: 'leftarrow',\n      rightarrow: 'rightarrow',\n      uparrow: 'uparrow',\n      space: 'space'\n    };\n    this.tooltipOpen = false;\n    this.isTouchSelected = false;\n  };\n\n  Rating.prototype.render = function () {\n    this.initialize();\n    this.updateMinValue();\n    this.updateTemplateFunction();\n    this.triggerChange(null, this.value, false);\n    this.renderItems();\n    this.displayLabel();\n  };\n\n  Rating.prototype.initialize = function () {\n    this.wrapper = this.createElement('div', {\n      className: 'e-' + this.getModuleName() + '-container '\n    });\n    this.element.parentNode.insertBefore(this.wrapper, this.element);\n    this.wrapper.appendChild(this.element);\n\n    if (this.element.getAttribute('name') == null) {\n      this.element.setAttribute('name', this.element.id);\n    }\n\n    attributes(this.element, {\n      'aria-label': 'rating'\n    });\n    this.renderItemList();\n    this.updateReset();\n\n    if (this.readOnly) {\n      this.wrapper.classList.add(READONLY);\n    }\n\n    if (!this.visible) {\n      this.wrapper.classList.add(HIDDEN);\n    }\n\n    if (this.enableRtl) {\n      this.wrapper.classList.add(RTL);\n    }\n\n    if (this.enableAnimation) {\n      this.wrapper.classList.add(ANIMATION);\n    }\n\n    if (this.cssClass) {\n      addClass([this.wrapper], this.cssClass.split(' '));\n    }\n\n    this.updateTooltip();\n    this.wireKeyboardEvent();\n    this.updateDisabled();\n  };\n\n  Rating.prototype.updateDisabled = function () {\n    this.wrapper.classList[this.disabled ? 'add' : 'remove'](DISABLED);\n    attributes(this.ratingItemList, {\n      'tabindex': this.disabled ? '-1' : '0'\n    });\n    this.updateResetButton();\n  };\n\n  Rating.prototype.updateResetButton = function () {\n    if (this.allowReset) {\n      var isDisabled = this.value <= this.min || this.disabled;\n      this.resetElement.classList[isDisabled ? 'add' : 'remove'](DISABLED);\n      attributes(this.resetElement, {\n        'tabindex': isDisabled ? '-1' : '0',\n        'aria-hidden': isDisabled.toString()\n      });\n    }\n  };\n\n  Rating.prototype.renderItemList = function () {\n    var _this = this;\n\n    this.ratingItemList = this.createElement('div', {\n      className: ITEMLIST,\n      id: this.element.id + '_item-list'\n    });\n    attributes(this.ratingItemList, {\n      'aria-label': 'rating',\n      'role': 'slider'\n    });\n    this.wrapper.appendChild(this.ratingItemList);\n    EventHandler.add(this.ratingItemList, 'touchmove', function (e) {\n      return _this.touchMoveHandler(e);\n    }, this);\n    EventHandler.add(this.ratingItemList, Browser.touchEndEvent, this.touchEndHandler, this);\n  };\n\n  Rating.prototype.touchMoveHandler = function (e) {\n    if (!this.isTouchSelected) {\n      this.wrapper.classList.add(\"e-rating-touch\");\n      this.isTouchSelected = true;\n    }\n\n    this.wrapper.classList.add(\"e-touch-select\");\n    var rect = this.ratingItemList.getBoundingClientRect();\n    var x = e.touches[0].clientX - rect.x;\n    var currValue = x / rect.width * this.itemsCount;\n    currValue = this.enableRtl ? this.itemsCount - currValue : currValue;\n    currValue = currValue < this.min ? this.min : currValue > this.itemsCount ? this.itemsCount : currValue;\n    currValue = this.validateValue(currValue);\n    var element = currValue === 0 ? null : this.itemElements[parseInt((Math.ceil(currValue) - 1).toString(), 10)];\n\n    if (currValue === this.currentValue) {\n      if (this.showTooltip && element) {\n        this.openRatingTooltip(element, false);\n      }\n\n      return;\n    }\n\n    var previousValue = this.currentValue;\n    this.triggerChange(e, currValue);\n    this.updateCurrentValue(currValue);\n\n    if (this.showTooltip) {\n      if (element) {\n        if (Math.ceil(currValue) !== Math.ceil(previousValue)) {\n          this.closeRatingTooltip();\n        }\n\n        this.openRatingTooltip(element, true);\n      } else {\n        this.closeRatingTooltip();\n      }\n    }\n  };\n\n  Rating.prototype.touchEndHandler = function () {\n    this.closeRatingTooltip();\n    this.wrapper.classList.remove(\"e-touch-select\");\n  };\n\n  Rating.prototype.updateTemplateFunction = function () {\n    this.emptyTemplateFunction = this.emptyTemplate ? this.getTemplateString(this.emptyTemplate) : null;\n    this.fullTemplateFunction = this.fullTemplate ? this.getTemplateString(this.fullTemplate) : null;\n  };\n\n  Rating.prototype.renderItems = function () {\n    var _this = this;\n\n    for (var i = 0; i < this.itemsCount; i++) {\n      var ratingItemContainer = this.createElement('span', {\n        className: ITEMCONTAINER\n      });\n      var spanItem = this.createElement('span', {\n        className: 'e-rating-item'\n      });\n      var ratingValue = this.getRatingValue(this.value, i);\n      this.renderItemContent(spanItem, ratingValue, i, false);\n      ratingItemContainer.appendChild(spanItem);\n      this.wireItemsEvents(ratingItemContainer, i + 1);\n      this.itemElements.push(ratingItemContainer);\n      var eventArgs = {\n        element: ratingItemContainer,\n        value: i + 1\n      };\n      this.trigger('beforeItemRender', eventArgs, function (args) {\n        _this.ratingItemList.appendChild(args.element);\n      });\n    }\n\n    attributes(this.ratingItemList, {\n      'aria-valuemax': this.itemsCount.toString()\n    });\n    this.updateItemValue(false);\n  };\n\n  Rating.prototype.renderItemContent = function (spanEle, val, index, isrerender) {\n    if (isrerender) {\n      this.removeItemContent(spanEle);\n    }\n\n    if (this.fullTemplate && val === 1) {\n      spanEle.classList.add(FULLTEMPLATE);\n      append(this.fullTemplateFunction({\n        index: index,\n        ratingValue: val\n      }, this, 'ratingFullTemplate', this.element.id + 'fullTemplate', this.isStringTemplate), spanEle);\n    } else if (this.emptyTemplate) {\n      spanEle.classList.add(EMPTYTEMPLATE);\n      append(this.emptyTemplateFunction({\n        index: index,\n        ratingValue: val\n      }, this, 'ratingEmptyTemplate', this.element.id + 'emptyTemplate', this.isStringTemplate), spanEle);\n    } else {\n      addClass([spanEle], ICONCSS.split(' '));\n    }\n  };\n\n  Rating.prototype.removeItemContent = function (spanEle) {\n    spanEle.classList.remove(FULLTEMPLATE, EMPTYTEMPLATE);\n    removeClass([spanEle], ICONCSS.split(' '));\n\n    if (spanEle.firstChild) {\n      spanEle.innerHTML = '';\n    }\n  };\n\n  Rating.prototype.updateTooltip = function () {\n    if (this.showTooltip) {\n      this.tooltipObj = new Tooltip({\n        target: '.e-rating-item-container',\n        windowCollision: true,\n        opensOn: 'Custom',\n        cssClass: this.cssClass ? 'e-rating-tooltip ' + this.cssClass : 'e-rating-tooltip'\n      });\n      this.tooltipObj.appendTo(this.ratingItemList);\n    } else {\n      if (!isNullOrUndefined(this.tooltipObj)) {\n        this.tooltipObj.destroy();\n        this.tooltipObj = null;\n      }\n    }\n  };\n\n  Rating.prototype.updateMinValue = function () {\n    this.setProperties({\n      min: this.validateValue(this.min)\n    }, true);\n\n    if (this.min > 0 && this.value < this.min) {\n      this.triggerChange(null, this.min, false);\n    }\n\n    attributes(this.ratingItemList, {\n      'aria-valuemin': this.min.toString()\n    });\n  };\n\n  Rating.prototype.validateValue = function (currentValue) {\n    if (currentValue > this.itemsCount) {\n      currentValue = this.itemsCount;\n    } else if (currentValue < 0) {\n      currentValue = 0;\n    } else {\n      currentValue = this.precision === PrecisionType.Full || this.enableSingleSelection ? Math.round(currentValue) : this.precision === PrecisionType.Half ? Math.round(currentValue * 2) / 2 : this.precision === PrecisionType.Quarter ? Math.round(currentValue * 4) / 4 : Math.round(currentValue * 10) / 10;\n    }\n\n    return currentValue;\n  };\n\n  Rating.prototype.getRatingValue = function (value, i) {\n    return this.enableSingleSelection ? value > i && value <= i + 1 ? 1 : 0 : value >= i + 1 ? 1 : value < i ? 0 : value - i;\n  };\n\n  Rating.prototype.updateItemValue = function (isUpdate) {\n    if (isUpdate === void 0) {\n      isUpdate = true;\n    }\n\n    if (isUpdate && this.isReact) {\n      this.clearTemplate(['ratingEmptyTemplate', 'ratingFullTemplate']);\n    }\n\n    for (var i = 0; i < this.itemsCount; i++) {\n      var itemElement = this.itemElements[parseInt(i.toString(), 10)];\n      itemElement.classList.remove(SELECTED, INTERMEDIATE, SELECTEDVALUE);\n      var ratingValue = this.getRatingValue(this.currentValue, i);\n\n      if (ratingValue === 1) {\n        itemElement.classList.add(SELECTED);\n      } else if (ratingValue > 0) {\n        itemElement.classList.add(INTERMEDIATE);\n      } else if (this.precision === PrecisionType.Full && i + 1 <= this.value && !this.enableSingleSelection) {\n        itemElement.classList.add(SELECTEDVALUE);\n      }\n\n      if (isUpdate) {\n        this.updateItemContent(ratingValue, i);\n      }\n\n      itemElement.style.setProperty(RATINGVALUE, ratingValue * 100 + '%');\n      itemElement.classList[this.value === 0 && i === 0 || this.value === i + 1 || ratingValue > 0 && ratingValue < 1 ? 'add' : 'remove']('e-rating-focus');\n    }\n\n    if (isUpdate) {\n      this.renderReactTemplates();\n    }\n\n    this.updateResetButton();\n    attributes(this.ratingItemList, {\n      'aria-valuenow': this.currentValue.toString()\n    });\n    attributes(this.element, {\n      'value': this.value.toString()\n    });\n  };\n\n  Rating.prototype.updateItemContent = function (ratingValue, index) {\n    if (!this.fullTemplate && !this.emptyTemplate) {\n      return;\n    }\n\n    var spanEle = this.itemElements[parseInt(index.toString(), 10)].querySelector('.e-rating-item');\n\n    if (this.fullTemplate && ratingValue === 1) {\n      if (!this.isReact && spanEle.classList.contains(FULLTEMPLATE)) {\n        return;\n      }\n\n      this.removeItemContent(spanEle);\n      spanEle.classList.add(FULLTEMPLATE);\n      append(this.fullTemplateFunction({\n        ratingValue: ratingValue,\n        index: index\n      }, this, 'ratingFullTemplate', this.element.id + 'fullTemplate' + index, this.isStringTemplate), spanEle);\n    } else if (this.emptyTemplate) {\n      if (!this.isReact && spanEle.classList.contains(EMPTYTEMPLATE)) {\n        return;\n      }\n\n      this.removeItemContent(spanEle);\n      spanEle.classList.add(EMPTYTEMPLATE);\n      append(this.emptyTemplateFunction({\n        ratingValue: ratingValue,\n        index: index\n      }, this, 'ratingEmptyTemplate', this.element.id + 'emptyTemplate' + index, this.isStringTemplate), spanEle);\n    } else {\n      this.removeItemContent(spanEle);\n      addClass([spanEle], ICONCSS.split(' '));\n    }\n  };\n\n  Rating.prototype.updateTooltipContent = function (isChange) {\n    var _this = this;\n\n    if (this.showTooltip) {\n      if (this.isReact) {\n        this.clearTemplate(['ratingTooltipTemplate']);\n      }\n\n      var content_1;\n\n      if (this.tooltipTemplate) {\n        content_1 = this.createElement('span', {\n          className: 'e-rating-tooltip-content'\n        });\n        var templateFunction = this.getTemplateString(this.tooltipTemplate);\n        append(templateFunction({\n          value: this.currentValue\n        }, this, 'ratingTooltipTemplate', this.element.id + 'tooltipTemplate', this.isStringTemplate), content_1);\n        this.tooltipObj.setProperties({\n          content: content_1\n        }, isChange);\n\n        if (this.isAngular) {\n          setTimeout(function () {\n            var ratingSpan = _this.ratingItemList.querySelectorAll('.' + ITEMCONTAINER + '.' + SELECTED);\n\n            _this.tooltipObj.refresh(ratingSpan[ratingSpan.length - 1]);\n          });\n        }\n      } else {\n        content_1 = this.currentValue.toString();\n        this.tooltipObj.setProperties({\n          content: initializeCSPTemplate(function () {\n            return content_1;\n          })\n        }, isChange);\n      }\n\n      this.renderReactTemplates();\n    }\n  };\n\n  Rating.prototype.getTemplateString = function (template) {\n    var stringContent = '';\n\n    try {\n      if (typeof template !== 'function') {\n        var tempEle = select(template);\n\n        if (tempEle) {\n          //Return innerHTML incase of jsrenderer script else outerHTML\n          stringContent = tempEle.tagName === 'SCRIPT' ? tempEle.innerHTML : tempEle.outerHTML;\n        } else {\n          stringContent = template;\n        }\n      } else {\n        stringContent = template;\n      }\n    } catch (e) {\n      stringContent = template;\n    }\n\n    return compile(stringContent);\n  };\n\n  Rating.prototype.displayLabel = function () {\n    if (this.showLabel) {\n      this.spanLabel = this.createElement('span', {\n        className: LABEL\n      });\n      this.updateLabel();\n      this.updateLabelPosition();\n    } else {\n      if (this.wrapper.contains(this.spanLabel)) {\n        remove(this.spanLabel);\n        this.spanLabel = null;\n      }\n    }\n  };\n\n  Rating.prototype.updateLabel = function () {\n    if (this.showLabel) {\n      if (this.labelTemplate) {\n        if (this.isReact) {\n          this.clearTemplate(['ratingLabelTemplate']);\n        }\n\n        if (this.spanLabel.firstChild) {\n          this.spanLabel.innerHTML = '';\n        }\n\n        var templateFunction = this.getTemplateString(this.labelTemplate);\n        append(templateFunction({\n          value: this.currentValue\n        }, this, 'ratingLabelTemplate', this.element.id + 'labelTemplate', this.isStringTemplate), this.spanLabel);\n        this.renderReactTemplates();\n      } else {\n        this.spanLabel.textContent = this.currentValue + ' / ' + this.itemsCount;\n      }\n    }\n  };\n\n  Rating.prototype.updateReset = function () {\n    if (this.allowReset) {\n      this.resetElement = this.createElement('span', {\n        className: RESET,\n        attrs: {\n          'aria-label': 'resetbutton',\n          'role': 'button'\n        }\n      });\n      this.updateResetButton();\n      EventHandler.add(this.resetElement, 'click', this.resetClicked, this);\n      this.wrapper.insertBefore(this.resetElement, this.ratingItemList);\n    } else {\n      if (this.wrapper.contains(this.resetElement)) {\n        remove(this.resetElement);\n        this.resetElement = null;\n      }\n    }\n  };\n\n  Rating.prototype.updateLabelPosition = function () {\n    this.clearLabelPosition();\n    this.spanLabel.classList.add('e-label-' + this.labelPosition.toLowerCase());\n\n    if (this.labelPosition === 'Left' || this.labelPosition === 'Top') {\n      this.wrapper.firstChild.after(this.spanLabel);\n    } else {\n      this.wrapper.appendChild(this.spanLabel);\n    }\n  };\n\n  Rating.prototype.clearLabelPosition = function () {\n    var removeCss = this.spanLabel.classList.value.match(/(e-label-[top|bottom|right|left]+)/g);\n\n    if (removeCss) {\n      removeClass([this.spanLabel], removeCss);\n    }\n  };\n\n  Rating.prototype.wireItemsEvents = function (itemElement, index) {\n    var _this = this;\n\n    EventHandler.add(itemElement, 'click', function (e) {\n      return _this.clickHandler(e);\n    }, this);\n    EventHandler.add(itemElement, 'mousemove', function (e) {\n      return _this.mouseMoveHandler(index, e);\n    }, this);\n    EventHandler.add(itemElement, 'mouseleave', this.mouseLeaveHandler, this);\n  };\n\n  Rating.prototype.clickHandler = function (e) {\n    this.currentValue = this.min > 0 && this.currentValue < this.min ? this.min : this.currentValue;\n    this.triggerChange(e, this.currentValue);\n    this.updateItemValue();\n    this.updateLabel();\n    this.updateResetButton();\n  };\n\n  Rating.prototype.updateValueChange = function (e, val, isInteracted) {\n    if (isInteracted === void 0) {\n      isInteracted = true;\n    }\n\n    this.triggerChange(e, val, isInteracted);\n    this.updateItemValue();\n    this.updateLabel();\n  };\n\n  Rating.prototype.triggerChange = function (e, val, isInteracted) {\n    if (isInteracted === void 0) {\n      isInteracted = true;\n    }\n\n    val = this.validateValue(val);\n    this.currentValue = val;\n\n    if (this.currentValue === this.value) {\n      return;\n    }\n\n    var eventArgs = {\n      event: e,\n      isInteracted: isInteracted,\n      value: val,\n      previousValue: this.value\n    };\n    this.setProperties({\n      value: val\n    }, true);\n    this.trigger('valueChanged', eventArgs);\n  };\n\n  Rating.prototype.mouseMoveHandler = function (index, e) {\n    if (this.isTouchSelected) {\n      this.wrapper.classList.remove(\"e-rating-touch\");\n      this.isTouchSelected = false;\n    }\n\n    var currValue = this.calculateCurrentValue(index, e);\n    currValue = this.validateValue(currValue);\n    var element = this.itemElements[parseInt((index - 1).toString(), 10)];\n\n    if (currValue === this.currentValue) {\n      this.openRatingTooltip(element, false);\n      return;\n    }\n\n    this.updateCurrentValue(currValue);\n    this.openRatingTooltip(element, true);\n    var eventArgs = {\n      element: element,\n      event: e,\n      value: currValue\n    };\n    this.trigger('onItemHover', eventArgs);\n  };\n\n  Rating.prototype.openRatingTooltip = function (element, isChange) {\n    if (this.showTooltip) {\n      if (!this.tooltipOpen) {\n        this.updateTooltipContent(false);\n        this.tooltipObj.open(element);\n        this.tooltipOpen = true;\n      } else if (isChange) {\n        this.updateTooltipContent(true);\n        this.tooltipObj.refresh(element);\n      }\n    }\n  };\n\n  Rating.prototype.closeRatingTooltip = function () {\n    if (this.tooltipOpen) {\n      this.tooltipObj.close();\n      this.tooltipOpen = false;\n    }\n  };\n\n  Rating.prototype.updateCurrentValue = function (currValue) {\n    this.currentValue = currValue;\n    this.updateItemValue();\n    this.updateLabel();\n  };\n\n  Rating.prototype.mouseLeaveHandler = function () {\n    this.closeRatingTooltip();\n    this.updateCurrentValue(this.value);\n  };\n\n  Rating.prototype.calculateCurrentValue = function (index, args) {\n    var currentValue = index;\n\n    if (!(this.enableSingleSelection || this.precision === PrecisionType.Full)) {\n      currentValue = args.offsetX / this.itemElements[index - 1].clientWidth;\n      currentValue = this.enableRtl ? 1 - currentValue : currentValue;\n\n      if (this.precision === PrecisionType.Quarter) {\n        currentValue = currentValue <= 0.25 ? 0.25 : currentValue <= 0.5 ? 0.5 : currentValue < 0.75 ? 0.75 : 1.0;\n      } else if (this.precision === PrecisionType.Half) {\n        currentValue = currentValue <= 0.5 ? 0.5 : 1;\n      }\n\n      currentValue = currentValue + index - 1;\n    }\n\n    return currentValue;\n  };\n  /**\n   * Reset’s the value to minimum.\n   *\n   * {% codeBlock src='rating/reset/index.md' %}{% endcodeBlock %}\n   *\n   * @returns {void}\n   */\n\n\n  Rating.prototype.reset = function () {\n    this.resetClicked(null, false);\n  };\n\n  Rating.prototype.resetClicked = function (e, isInteracted) {\n    if (isInteracted === void 0) {\n      isInteracted = true;\n    }\n\n    this.updateValueChange(e, this.min, isInteracted);\n    this.updateResetButton();\n  };\n\n  Rating.prototype.wireKeyboardEvent = function () {\n    this.keyboardModuleRating = new KeyboardEvents(this.wrapper, {\n      keyAction: this.keyActionHandler.bind(this),\n      keyConfigs: this.keyConfigs,\n      eventName: 'keydown'\n    });\n  };\n\n  Rating.prototype.keyActionHandler = function (e) {\n    if (this.disabled || this.readOnly) {\n      return;\n    }\n\n    if (e.target.classList.contains(ITEMLIST)) {\n      switch (e.action) {\n        case 'uparrow':\n          this.handleNavigation(e, true);\n          break;\n\n        case 'downarrow':\n          this.handleNavigation(e, false);\n          break;\n\n        case 'leftarrow':\n          this.handleNavigation(e, this.enableRtl);\n          break;\n\n        case 'rightarrow':\n          this.handleNavigation(e, !this.enableRtl);\n          break;\n      }\n    }\n\n    if (this.allowReset && e.target.classList.contains('e-reset')) {\n      switch (e.action) {\n        case 'space':\n          this.resetClicked(e);\n          break;\n      }\n    }\n  };\n\n  Rating.prototype.handleNavigation = function (e, isIncrease) {\n    if (!isIncrease && this.value > this.min || isIncrease && this.value < this.itemsCount) {\n      var currentValue = this.precision === PrecisionType.Full || this.enableSingleSelection ? 1 : this.precision === PrecisionType.Half ? 0.5 : this.precision === PrecisionType.Quarter ? 0.25 : Math.round(0.1 * 10) / 10;\n      currentValue = isIncrease ? this.value + currentValue : this.value - currentValue;\n      this.updateValueChange(e, currentValue);\n      this.updateResetButton();\n    }\n  };\n\n  Rating.prototype.updateContent = function () {\n    if (this.isReact) {\n      this.clearTemplate(['ratingEmptyTemplate', 'ratingFullTemplate']);\n    }\n\n    for (var i = 0; i < this.itemsCount; i++) {\n      var itemElement = this.itemElements[parseInt(i.toString(), 10)].firstElementChild;\n      this.renderItemContent(itemElement, this.getRatingValue(this.value, i), i, true);\n    }\n  };\n  /**\n   * To get component name.\n   *\n   * @returns {string} - Module Name\n   * @private\n   */\n\n\n  Rating.prototype.getModuleName = function () {\n    return 'rating';\n  };\n  /**\n   * To get the properties to be maintained in the persisted state.\n   *\n   * @returns {string} - Persist data\n   */\n\n\n  Rating.prototype.getPersistData = function () {\n    return this.addOnPersist([]);\n  };\n\n  Rating.prototype.removeItemElements = function () {\n    for (var i = 0; i < this.itemElements.length; i++) {\n      remove(this.itemElements[parseInt(i.toString(), 10)]);\n    }\n\n    this.itemElements = [];\n  };\n  /**\n   * Destroys the Rating instance.\n   *\n   * @returns {void}\n   */\n\n\n  Rating.prototype.destroy = function () {\n    var _this = this;\n\n    _super.prototype.destroy.call(this); // unwires the events and detach the li elements\n\n\n    this.removeItemElements();\n    this.clearTemplate();\n\n    if (this.spanLabel) {\n      remove(this.spanLabel);\n      this.spanLabel = null;\n    }\n\n    if (this.resetElement) {\n      remove(this.resetElement);\n      this.resetElement = null;\n    }\n\n    if (this.showTooltip) {\n      this.tooltipObj.destroy();\n      this.tooltipObj = null;\n    }\n\n    remove(this.ratingItemList);\n    this.ratingItemList = null;\n    this.wrapper.parentNode.insertBefore(this.element, this.wrapper);\n    remove(this.wrapper);\n    this.wrapper = null;\n    this.keyboardModuleRating.destroy();\n    this.keyboardModuleRating = null;\n    ['value', 'aria-label', 'name'].forEach(function (attr) {\n      _this.element.removeAttribute(attr);\n    });\n  };\n  /**\n   * Called internally if any of the property value changed.\n   *\n   * @param  {RatingModel} newProp - Specifies new properties\n   * @param  {RatingModel} oldProp - Specifies old properties\n   * @returns {void}\n   * @private\n   */\n\n\n  Rating.prototype.onPropertyChanged = function (newProp, oldProp) {\n    for (var _i = 0, _a = Object.keys(newProp); _i < _a.length; _i++) {\n      var prop = _a[_i];\n\n      switch (prop) {\n        case 'value':\n          this.updateValueChange(null, this.value > this.min ? this.value : this.min, false);\n          break;\n\n        case 'min':\n          this.updateMinValue();\n          this.updateItemValue();\n          this.updateLabel();\n          break;\n\n        case 'showLabel':\n          this.displayLabel();\n          break;\n\n        case 'visible':\n          this.wrapper.classList[!this.visible ? 'add' : 'remove'](HIDDEN);\n          break;\n\n        case 'disabled':\n          this.updateDisabled();\n          break;\n\n        case 'readOnly':\n          this.wrapper.classList[this.readOnly ? 'add' : 'remove'](READONLY);\n          break;\n\n        case 'allowReset':\n          this.updateReset();\n          break;\n\n        case 'enableRtl':\n          this.wrapper.classList[this.enableRtl ? 'add' : 'remove'](RTL);\n          break;\n\n        case 'cssClass':\n          if (oldProp.cssClass) {\n            removeClass([this.wrapper], oldProp.cssClass.split(' '));\n          }\n\n          if (newProp.cssClass) {\n            addClass([this.wrapper], newProp.cssClass.split(' '));\n          }\n\n          if (this.tooltipObj) {\n            this.tooltipObj.setProperties({\n              cssClass: this.cssClass ? 'e-rating-tooltip ' + this.cssClass : 'e-rating-tooltip'\n            });\n          }\n\n          break;\n\n        case 'labelPosition':\n          this.updateLabelPosition();\n          break;\n\n        case 'showTooltip':\n          this.updateTooltip();\n          break;\n\n        case 'precision':\n          this.updateMinValue();\n          this.triggerChange(null, this.value, false);\n          this.updateItemValue();\n          this.updateLabel();\n          break;\n\n        case 'enableSingleSelection':\n          //To validate the value against single selection and update the items, label + trigger change event if value changed\n          this.updateValueChange(null, this.currentValue, false);\n          break;\n\n        case 'enableAnimation':\n          this.wrapper.classList[this.enableAnimation ? 'add' : 'remove'](ANIMATION);\n          break;\n\n        case 'emptyTemplate':\n        case 'fullTemplate':\n          this.updateTemplateFunction();\n          this.updateContent();\n          break;\n\n        case 'labelTemplate':\n          this.updateLabel();\n          break;\n\n        case 'itemsCount':\n          this.removeItemElements();\n          this.renderItems();\n          this.updateLabel();\n          break;\n      }\n    }\n  };\n\n  __decorate([Property(false)], Rating.prototype, \"allowReset\", void 0);\n\n  __decorate([Property('')], Rating.prototype, \"cssClass\", void 0);\n\n  __decorate([Property(false)], Rating.prototype, \"disabled\", void 0);\n\n  __decorate([Property('')], Rating.prototype, \"emptyTemplate\", void 0);\n\n  __decorate([Property(true)], Rating.prototype, \"enableAnimation\", void 0);\n\n  __decorate([Property(false)], Rating.prototype, \"enableSingleSelection\", void 0);\n\n  __decorate([Property('')], Rating.prototype, \"fullTemplate\", void 0);\n\n  __decorate([Property(5)], Rating.prototype, \"itemsCount\", void 0);\n\n  __decorate([Property(LabelPosition.Right)], Rating.prototype, \"labelPosition\", void 0);\n\n  __decorate([Property('')], Rating.prototype, \"labelTemplate\", void 0);\n\n  __decorate([Property(0.0)], Rating.prototype, \"min\", void 0);\n\n  __decorate([Property(PrecisionType.Full)], Rating.prototype, \"precision\", void 0);\n\n  __decorate([Property(false)], Rating.prototype, \"readOnly\", void 0);\n\n  __decorate([Property(false)], Rating.prototype, \"showLabel\", void 0);\n\n  __decorate([Property(true)], Rating.prototype, \"showTooltip\", void 0);\n\n  __decorate([Property('')], Rating.prototype, \"tooltipTemplate\", void 0);\n\n  __decorate([Property(0.0)], Rating.prototype, \"value\", void 0);\n\n  __decorate([Property(true)], Rating.prototype, \"visible\", void 0);\n\n  __decorate([Event()], Rating.prototype, \"beforeItemRender\", void 0);\n\n  __decorate([Event()], Rating.prototype, \"created\", void 0);\n\n  __decorate([Event()], Rating.prototype, \"onItemHover\", void 0);\n\n  __decorate([Event()], Rating.prototype, \"valueChanged\", void 0);\n\n  Rating = __decorate([NotifyPropertyChanges], Rating);\n  return Rating;\n}(Component);\n\nexport { Rating };","map":null,"metadata":{},"sourceType":"module"}