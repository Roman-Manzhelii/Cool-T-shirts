{"ast":null,"code":"import { isNullOrUndefined as isNOU, isObject, merge } from './util';\n/**\n * The Fetch class provides a way to make asynchronous network requests, typically to retrieve resources from a server.\n * ```typescript\n *   var fetchApi = new Fetch('index.html', 'GET');\n *   fetchApi.send()\n *      .then((value) => {\n *          console.log(value);\n *      }).catch((error) => {\n *          console.log(error);\n *      });\n * ```\n */\n\nvar Fetch =\n/** @class */\nfunction () {\n  /**\n   * Constructor for Fetch class.\n   *\n   * @param {string|Object} options - Specifies the URL or Request object with URL to which the request is to be sent.\n   * @param {string} type - Specifies which request method is to be used, such as GET, POST, etc.\n   * @param {string} contentType - Specifies the content type of the request, which is used to indicate the original media type of the resource.\n   */\n  function Fetch(options, type, contentType) {\n    /**\n     * Specifies which request method is to be used, such as GET, POST, etc.\n     *\n     * @default GET\n     */\n    this.type = 'GET';\n    /**\n     * A boolean value indicating whether to reject the promise or not.\n     *\n     * @private\n     * @default true\n     */\n\n    this.emitError = true;\n\n    if (typeof options === 'string') {\n      this.url = options;\n      this.type = !isNOU(type) ? type.toUpperCase() : this.type;\n      this.contentType = contentType;\n    } else if (isObject(options) && Object.keys(options).length > 0) {\n      merge(this, options);\n    }\n\n    this.contentType = !isNOU(this.contentType) ? this.contentType : 'application/json; charset=utf-8';\n  }\n  /**\n   * Send the request to server.\n   *\n   * @param {string|Object} data - Specifies the data that needs to be added to the request.\n   * @returns {Promise<Response>} - Returns the response to a request.\n   */\n\n\n  Fetch.prototype.send = function (data) {\n    var _this = this;\n\n    var contentTypes = {\n      'application/json': 'json',\n      'multipart/form-data': 'formData',\n      'application/octet-stream': 'blob',\n      'application/x-www-form-urlencoded': 'formData'\n    };\n\n    try {\n      if (isNOU(this.fetchRequest) && this.type === 'GET') {\n        this.fetchRequest = new Request(this.url, {\n          method: this.type\n        });\n      } else if (isNOU(this.fetchRequest)) {\n        this.data = !isNOU(data) ? data : this.data;\n        this.fetchRequest = new Request(this.url, {\n          method: this.type,\n          headers: {\n            'Content-Type': this.contentType\n          },\n          body: this.data\n        });\n      }\n\n      var eventArgs = {\n        cancel: false,\n        fetchRequest: this.fetchRequest\n      };\n      this.triggerEvent(this['beforeSend'], eventArgs);\n\n      if (eventArgs.cancel) {\n        return null;\n      }\n\n      this.fetchResponse = fetch(this.fetchRequest);\n      return this.fetchResponse.then(function (response) {\n        _this.triggerEvent(_this['onLoad'], response);\n\n        if (!response.ok) {\n          throw response;\n        }\n\n        var responseType = 'text';\n\n        for (var _i = 0, _a = Object.keys(contentTypes); _i < _a.length; _i++) {\n          var key = _a[_i];\n\n          if (response.headers.get('Content-Type') && response.headers.get('Content-Type').indexOf(key) !== -1) {\n            responseType = contentTypes[key];\n          }\n        }\n\n        return response[responseType](); // eslint-disable-next-line\n      }).then(function (data) {\n        _this.triggerEvent(_this['onSuccess'], data, _this);\n\n        return data; // eslint-disable-next-line\n      }).catch(function (error) {\n        var returnVal = {};\n\n        if (_this.emitError) {\n          _this.triggerEvent(_this['onFailure'], error);\n\n          returnVal = Promise.reject(error);\n        }\n\n        return returnVal;\n      });\n    } catch (error) {\n      return error;\n    }\n  };\n\n  Fetch.prototype.triggerEvent = function (callback, data, instance) {\n    if (!isNOU(callback) && typeof callback === 'function') {\n      callback(data, instance);\n    }\n  };\n\n  return Fetch;\n}();\n\nexport { Fetch };","map":null,"metadata":{},"sourceType":"module"}