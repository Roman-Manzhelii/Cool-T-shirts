{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { ComplexBase } from '@syncfusion/ej2-react-base';\n/**\n * `FilesDirective` represent a file of the react uploader.\n * It must be contained in a Uploader component(`UploaderComponent`).\n * ```tsx\n * <UploaderComponent multiple={true}>\n *   <FilesDirective>\n *    <FileDirective name='Java' size=23000 type='pdf'><FileDirective>\n *    <FileDirective name='C++' size=30000 type='.docx'><FileDirective>\n *   </FilesDirective>\n * </UploaderComponent>\n * ```\n */\n\nvar UploadedFilesDirective =\n/** @class */\nfunction (_super) {\n  __extends(UploadedFilesDirective, _super);\n\n  function UploadedFilesDirective() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  UploadedFilesDirective.moduleName = 'uploadedFiles';\n  return UploadedFilesDirective;\n}(ComplexBase);\n\nexport { UploadedFilesDirective };\n\nvar FilesDirective =\n/** @class */\nfunction (_super) {\n  __extends(FilesDirective, _super);\n\n  function FilesDirective() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  FilesDirective.propertyName = 'files';\n  FilesDirective.moduleName = 'files';\n  return FilesDirective;\n}(ComplexBase);\n\nexport { FilesDirective };","map":null,"metadata":{},"sourceType":"module"}